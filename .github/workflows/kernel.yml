name: Build Ubuntu Kernels and Release

on:
  push:
    branches:
      - main

jobs:
  build-kernel-2404:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: depot-ubuntu-24.04-64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up caching
      - name: Cache kernel build
        uses: actions/cache@v4
        id: kernel-cache
        with:
          path: |
            kernel-build
            config
          key: kernel-build-${{ runner.os }}-${{ hashFiles('config') }}-${{ github.run_id }}
          restore-keys: |
            kernel-build-${{ runner.os }}-${{ hashFiles('config') }}-
            kernel-build-${{ runner.os }}-

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Install build dependencies
        run: |
          sudo sh -c 'echo "deb-src http://archive.ubuntu.com/ubuntu noble main" > /etc/apt/sources.list.d/kernel-source.list'
          sudo sh -c 'echo "deb-src http://archive.ubuntu.com/ubuntu noble-updates main" >> /etc/apt/sources.list.d/kernel-source.list'
          sudo apt-get update
          sudo apt build-dep -y linux-aws
          sudo apt-get install -y git build-essential fakeroot libncurses-dev gawk flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf llvm bc gcc python3 kmod cpio wget rsync debhelper-compat sccache bindgen default-jdk-headless dwarfdump libaudit-dev libcap-dev libdw-dev liblzma-dev libnewt-dev libnuma-dev libtraceevent-dev libtracefs-dev libunwind8-dev makedumpfile pahole dwarves rust-src rustc rustfmt uuid-dev asciidoc python3-docutils sharutils xmlto bindgen

      - name: Get kernel source
        if: steps.kernel-cache.outputs.cache-hit != 'true'
        run: |
          # Export KERNEL_VERSION environment variable
          KERNEL_VERSION="6.8.0-1027.29"

          # Create directory with kernel version appended
          mkdir -p kernel-build-${KERNEL_VERSION}
          cd kernel-build-${KERNEL_VERSION}

          # Check if the kernel source directory already exists
          if [ -d "linux-source" ]; then
            echo "Kernel source directory already exists, skipping download."
          else
            # Download the kernel tarball with version in the filename
            curl -L "https://launchpad.net/ubuntu/+archive/primary/+sourcefiles/linux-aws/${KERNEL_VERSION}/linux-aws_6.8.0.orig.tar.gz" -o ${KERNEL_VERSION}.tar.gz
            # Extract that specific tarball
            tar xf ${KERNEL_VERSION}.tar.gz
          fi

          # Find the directory extracted from that specific tarball
          KERNEL_SRC=$(find "$PWD" -maxdepth 1 -type d -name "linux-*" | head -1)
          echo "KERNEL_SRC=${KERNEL_SRC}" >> $GITHUB_ENV
          ln -sf "$KERNEL_SRC" "$PWD/linux-source"
          echo "KERNEL_SOURCE=$PWD/linux-source" >> $GITHUB_ENV

      - name: Copy config
        run: |
          cp config "$KERNEL_SOURCE/.config"
          echo "Using custom .config file"

      - name: Prepare build environment
        run: |
          export DEB_BUILD_PROFILES='pkg.linux.nokerneldbg pkg.linux.nokerneldbginfo'
          echo "DEB_BUILD_PROFILES=${DEB_BUILD_PROFILES}" >> $GITHUB_ENV

      - name: Set commit hash
        run: |
          SHORT_COMMIT=$(echo ${{ github.sha }} | cut -c 1-8)
          echo "SHORT_COMMIT=$SHORT_COMMIT" >> $GITHUB_ENV

      # Build kernel with the new approach
      - name: Build kernel
        env:
          CC: "sccache gcc"
        run: |
          cd "$KERNEL_SOURCE"
          PROCS=$(getconf _NPROCESSORS_ONLN)
          echo "Building with $PROCS processors"
          make olddefconfig
          make -j "$PROCS" CC="sccache gcc"
          fakeroot ./scripts/package/builddeb

      # Collect and organize .deb files
      - name: Collect .deb files
        run: |
          mkdir -p artifacts
          # Find all .deb files in the parent directory of the kernel source
          find "$(dirname "$KERNEL_SOURCE")" -maxdepth 1 -name "*.deb" -exec cp {} artifacts/ \;
          # Also look one directory up (for deb-pkg output)
          find "$(dirname "$(dirname "$KERNEL_SOURCE")")" -maxdepth 1 -name "*.deb" -exec cp {} artifacts/ \;
          ls -la artifacts/
          tar --zstd -cf kernel_${{ env.SHORT_COMMIT }}_linux_amd64.tar.zst -C artifacts/ $(ls -A artifacts/)
          rm artifacts/*.deb

      - name: Upload kernel artifactss
        uses: actions/upload-artifact@v4
        with:
          name: kernel-debs
          path: artifacts/*.tar.zst

      - name: Create Release
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: kernel-${{ github.sha }}
          name: Ubuntu Kernel Build ${{ github.sha }}
          files: artifacts/*.tar.zst
          draft: false
          prerelease: false
          generate_release_notes: true
